#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NoobDevBot
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NoobBotDatabase")]
	public partial class NoobBotDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnCreated();
    partial void Insertgroups(groups instance);
    partial void Updategroups(groups instance);
    partial void Deletegroups(groups instance);
    partial void Insertgroups_relation(groups_relation instance);
    partial void Updategroups_relation(groups_relation instance);
    partial void Deletegroups_relation(groups_relation instance);
    partial void Insertrights_relation(rights_relation instance);
    partial void Updaterights_relation(rights_relation instance);
    partial void Deleterights_relation(rights_relation instance);
    partial void Insertsmilies(smilies instance);
    partial void Updatesmilies(smilies instance);
    partial void Deletesmilies(smilies instance);
    partial void Insertstreams(streams instance);
    partial void Updatestreams(streams instance);
    partial void Deletestreams(streams instance);
    partial void Insertuser(user instance);
    partial void Updateuser(user instance);
    partial void Deleteuser(user instance);
    #endregion
		
		public NoobBotDatabaseDataContext() : 
				base(global::NoobDevBot.Properties.Settings.Default.NoobBotDatabaseConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public NoobBotDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NoobBotDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NoobBotDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public NoobBotDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<groups> groups
		{
			get
			{
				return this.GetTable<groups>();
			}
		}
		
		public System.Data.Linq.Table<groups_relation> groups_relation
		{
			get
			{
				return this.GetTable<groups_relation>();
			}
		}
		
		public System.Data.Linq.Table<rights_relation> rights_relation
		{
			get
			{
				return this.GetTable<rights_relation>();
			}
		}
		
		public System.Data.Linq.Table<smilies> smilies
		{
			get
			{
				return this.GetTable<smilies>();
			}
		}
		
		public System.Data.Linq.Table<streams> streams
		{
			get
			{
				return this.GetTable<streams>();
			}
		}
		
		public System.Data.Linq.Table<user> user
		{
			get
			{
				return this.GetTable<user>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.groups")]
	public partial class groups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<groups_relation> _groups_relation;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public groups()
		{
			this._groups_relation = new EntitySet<groups_relation>(new Action<groups_relation>(this.attach_groups_relation), new Action<groups_relation>(this.detach_groups_relation));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="groups_groups_relation", Storage="_groups_relation", ThisKey="id", OtherKey="group_id")]
		public EntitySet<groups_relation> groups_relation
		{
			get
			{
				return this._groups_relation;
			}
			set
			{
				this._groups_relation.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_groups_relation(groups_relation entity)
		{
			this.SendPropertyChanging();
			entity.groups = this;
		}
		
		private void detach_groups_relation(groups_relation entity)
		{
			this.SendPropertyChanging();
			entity.groups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.groups_relation")]
	public partial class groups_relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _user_id;
		
		private int _group_id;
		
		private EntityRef<groups> _groups;
		
		private EntityRef<user> _user;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Ongroup_idChanging(int value);
    partial void Ongroup_idChanged();
    #endregion
		
		public groups_relation()
		{
			this._groups = default(EntityRef<groups>);
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_group_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int group_id
		{
			get
			{
				return this._group_id;
			}
			set
			{
				if ((this._group_id != value))
				{
					if (this._groups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ongroup_idChanging(value);
					this.SendPropertyChanging();
					this._group_id = value;
					this.SendPropertyChanged("group_id");
					this.Ongroup_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="groups_groups_relation", Storage="_groups", ThisKey="group_id", OtherKey="id", IsForeignKey=true)]
		public groups groups
		{
			get
			{
				return this._groups.Entity;
			}
			set
			{
				groups previousValue = this._groups.Entity;
				if (((previousValue != value) 
							|| (this._groups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._groups.Entity = null;
						previousValue.groups_relation.Remove(this);
					}
					this._groups.Entity = value;
					if ((value != null))
					{
						value.groups_relation.Add(this);
						this._group_id = value.id;
					}
					else
					{
						this._group_id = default(int);
					}
					this.SendPropertyChanged("groups");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_groups_relation", Storage="_user", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.groups_relation.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.groups_relation.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.rights_relation")]
	public partial class rights_relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private bool _is_group;
		
		private int _reference;
		
		private string _right_id;
		
		private byte _POWER;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onis_groupChanging(bool value);
    partial void Onis_groupChanged();
    partial void OnreferenceChanging(int value);
    partial void OnreferenceChanged();
    partial void Onright_idChanging(string value);
    partial void Onright_idChanged();
    partial void OnPOWERChanging(byte value);
    partial void OnPOWERChanged();
    #endregion
		
		public rights_relation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_group", DbType="Bit NOT NULL")]
		public bool is_group
		{
			get
			{
				return this._is_group;
			}
			set
			{
				if ((this._is_group != value))
				{
					this.Onis_groupChanging(value);
					this.SendPropertyChanging();
					this._is_group = value;
					this.SendPropertyChanged("is_group");
					this.Onis_groupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reference", DbType="Int NOT NULL")]
		public int reference
		{
			get
			{
				return this._reference;
			}
			set
			{
				if ((this._reference != value))
				{
					this.OnreferenceChanging(value);
					this.SendPropertyChanging();
					this._reference = value;
					this.SendPropertyChanged("reference");
					this.OnreferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_right_id", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string right_id
		{
			get
			{
				return this._right_id;
			}
			set
			{
				if ((this._right_id != value))
				{
					this.Onright_idChanging(value);
					this.SendPropertyChanging();
					this._right_id = value;
					this.SendPropertyChanged("right_id");
					this.Onright_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_POWER", DbType="TinyInt NOT NULL")]
		public byte POWER
		{
			get
			{
				return this._POWER;
			}
			set
			{
				if ((this._POWER != value))
				{
					this.OnPOWERChanging(value);
					this.SendPropertyChanging();
					this._POWER = value;
					this.SendPropertyChanged("POWER");
					this.OnPOWERChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.smilies")]
	public partial class smilies : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _unicode;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnunicodeChanging(string value);
    partial void OnunicodeChanged();
    #endregion
		
		public smilies()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_unicode", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string unicode
		{
			get
			{
				return this._unicode;
			}
			set
			{
				if ((this._unicode != value))
				{
					this.OnunicodeChanging(value);
					this.SendPropertyChanging();
					this._unicode = value;
					this.SendPropertyChanged("unicode");
					this.OnunicodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.streams")]
	public partial class streams : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _userId;
		
		private System.DateTime _START;
		
		private string _title;
		
		private string _url;
		
		private EntityRef<user> _user;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnSTARTChanging(System.DateTime value);
    partial void OnSTARTChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    #endregion
		
		public streams()
		{
			this._user = default(EntityRef<user>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL")]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._user.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_START", DbType="DateTime NOT NULL")]
		public System.DateTime START
		{
			get
			{
				return this._START;
			}
			set
			{
				if ((this._START != value))
				{
					this.OnSTARTChanging(value);
					this.SendPropertyChanging();
					this._START = value;
					this.SendPropertyChanged("START");
					this.OnSTARTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(MAX)")]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_streams", Storage="_user", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public user user
		{
			get
			{
				return this._user.Entity;
			}
			set
			{
				user previousValue = this._user.Entity;
				if (((previousValue != value) 
							|| (this._user.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._user.Entity = null;
						previousValue.streams.Remove(this);
					}
					this._user.Entity = value;
					if ((value != null))
					{
						value.streams.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("user");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[user]")]
	public partial class user : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<groups_relation> _groups_relation;
		
		private EntitySet<streams> _streams;
		
    #region Definitionen der Erweiterungsmethoden
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public user()
		{
			this._groups_relation = new EntitySet<groups_relation>(new Action<groups_relation>(this.attach_groups_relation), new Action<groups_relation>(this.detach_groups_relation));
			this._streams = new EntitySet<streams>(new Action<streams>(this.attach_streams), new Action<streams>(this.detach_streams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(MAX)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_groups_relation", Storage="_groups_relation", ThisKey="id", OtherKey="user_id")]
		public EntitySet<groups_relation> groups_relation
		{
			get
			{
				return this._groups_relation;
			}
			set
			{
				this._groups_relation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="user_streams", Storage="_streams", ThisKey="id", OtherKey="userId")]
		public EntitySet<streams> streams
		{
			get
			{
				return this._streams;
			}
			set
			{
				this._streams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_groups_relation(groups_relation entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_groups_relation(groups_relation entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
		
		private void attach_streams(streams entity)
		{
			this.SendPropertyChanging();
			entity.user = this;
		}
		
		private void detach_streams(streams entity)
		{
			this.SendPropertyChanging();
			entity.user = null;
		}
	}
}
#pragma warning restore 1591
